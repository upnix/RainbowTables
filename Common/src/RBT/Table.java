package RBT;

import java.security.MessageDigest;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.ThreadLocalRandom;

/**
 * Loads or generates a rainbow table, given expected parameters in <code>Config</code> object.
 * Also contains static <code>Table</code> helper functions.
 *
 * @see Config
 * @see Search
 * @author Chris Cameron
 */
public class Table {
  /** Displays extra table generation data. */
  static final boolean DEBUG = true;

  /** Length of the hash generated by the hashing algorithm (SHA-1). */
  public static final int HASHLEN = 40;
  /** Allowable characters in the plain-text key space. */
  public static final Character[] ALLOWABLE_CHARS = {
      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
      't', 'u', 'v', 'w', 'x', 'y', 'z',
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
      'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'
  };

  /**
   * A running list of plain-text keys that have been used as chain-heads
   * @see java.util.TreeSet
   */
  Set<String> keysHashed = new TreeSet<>();

  /** Simple name for a default parameter from <code>Config</code> object. */
  int keyLength;
  /** Simple name for a default parameter from <code>Config</code> object. */
  int chainLength;
  /** Simple name for a default parameter from <code>Config</code> object. */
  long rowCount;
  /** Simple name for a default parameter from <code>Config</code> object. */
  int tableCount;
  /**
   * A count of all possible keys, given <code>keyLength</code> and <code>ALLOWABLE_CHARS</code>.
   * @see #keyLength
   * @see #ALLOWABLE_CHARS
   * */
  long keySpace;

  // TODO: Make sure you know what's happening here
  static MessageDigest shaHash;
  static {
    try {
      shaHash = MessageDigest.getInstance("SHA-1");
    } catch(Exception e) {
      System.exit(-1);
    }
  }
  /** Database connection */
  private Connection conn = null;


  /**
   * Constructs a rainbow table using parameters from <code>cfg</code>.
   * @param cfg Configuration parameters
   */
  Table(Config cfg) {
    // Set simple names for configuration options
    keyLength = cfg.getKeyLen();
    chainLength = cfg.getChainLen();
    rowCount = cfg.getRowCount();
    tableCount = cfg.getTblCount();
    keySpace = (long) Math.pow(ALLOWABLE_CHARS.length, keyLength);

    // Connect to the database
    try {
      establishDBConnection();
    } catch(Exception e) {
      System.out.println("Unable to create a database!");
      e.printStackTrace();
      System.exit(-1);
    }

    // Check if the rainbow table we've been asked to create already exists. If not, create it.
    if (!existsRBTables()) {
      generateTables(rowCount);
      // TODO: Better SQLException's
      try {
        conn.commit();
      } catch(SQLException se) {
        se.printStackTrace();
      }
    }
  }

  // PROTECTED, STATIC
  /**
   * Converts a byte array to hex for familiar looking SHA-1 hashes.<br>
   * Credit to: https://stackoverflow.com/a/311179/3846437
   * @param b byte[] of length 20
   * @return Hex string of 40-characters
   */
  protected static String byteArrayToHexString(byte[] b) {
    String result = "";
    for (int i = 0; i < b.length; i++) {
      result += Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1);
    }
    return result;
  }

  /**
   * Add a hash and key to the database.
   * @param b Hash
   * @param key Plain-text key
   * @return Success or failure
   */
  protected boolean add(byte[] b, String key) {
    // Choose a random starting table for attempted insert
    int tblNum = ThreadLocalRandom.current().nextInt(0, tableCount);
    // Attempt insert on each table, if necessary
    for(int i = 0; i < tableCount; i++) {
      String add_q = "INSERT INTO KL" + key.length() + "_" + tblNum + " VALUES(?, ?)";
      try {
        PreparedStatement add_ps = conn.prepareStatement(add_q);
        add_ps.setBytes(1, b);
        add_ps.setString(2, key);
        add_ps.execute();
        return true;
      } catch(SQLException se) {
        // Assuming duplicate key, try next table.
        tblNum = (tblNum+i+1)%tableCount;
      }
    }

    return false;
  }

  /**
   * Checks available tables for the passed hash.
   * @param b Hash to search tables for
   * @return Success or failure
   */
  protected boolean containsHash(byte[] b) {
    // TODO: Value in randomizing?
    for(int i = 0; i < tableCount; i++) {
      String chk_q = "SELECT 1 FROM KL" + keyLength + "_" + i + " " +
          "WHERE hashVal = ?";
      // TODO: Better SQLException's
      try {
        PreparedStatement chk_ps = conn.prepareStatement(chk_q);
        chk_ps.setBytes(1, b);
        ResultSet chk_rs = chk_ps.executeQuery();
        if(chk_rs.next()) {
          return true;
        }
      } catch(SQLException se) {
        se.printStackTrace();
      }
    }

    return false;
  }

  /**
   * Returns the key, that is paired with the passed hash, from the head of the chain.
   * @param b Hash corresponding the key
   * @return Head key, or blank if existent
   */
  protected String getHeadKey(byte[] b) {
    // TODO: Benefit from radomization?
    for(int i = 0; i < tableCount; i++) {
      String getKey_q = "SELECT hashKey FROM KL" + keyLength + "_" + i + " " +
          "WHERE hashVal = ?";
      // TODO: Better SQLException's
      try {
        PreparedStatement getKey_ps = conn.prepareStatement(getKey_q);
        getKey_ps.setBytes(1, b);
        ResultSet getKey_rs = getKey_ps.executeQuery();
        if(getKey_rs.next()) {
          return getKey_rs.getString("hashKey");
        }
      } catch(SQLException se) {
        se.printStackTrace();
      }
    }

    return "";
  }

  /**
   * Establish database connection, creating the DB if necessary.
   * @throws SQLException Failed to connect and/or create
   */
  protected void establishDBConnection() throws SQLException {
    // Create a string of configuration parameters, and hash that string for file name
    String dbName = "AC" + ALLOWABLE_CHARS.length +
        "KL" + keyLength +
        "CL" + chainLength +
        "RC" + rowCount +
        "TC" + tableCount;

    String connectionURL = "jdbc:derby:" + dbName + ";create=true";
    conn = DriverManager.getConnection(connectionURL);
    conn.setAutoCommit(false);
  }

  /**
   * Converts a hex string representing an SHA-1 hash to a <code>byte[]</code>.
   * This is compatible with what {@link java.security.MessageDigest#digest()} returns.
   * @see MessageDigest#digest()
   * @param s Hex string of 40-characters
   * @return byte[] of length 20
   */
  protected static byte[] hexStringToByteArray(String s) {
    byte[] result = new byte[(s.length()/2)];
    int front = 0; // Front position in String 's'
    int back = 2; // Rear position in String 's'
    // Step through String 's', 2 characters at a time
    for(int i = 0; i < (s.length()/2); i++) {
      String hex = s.substring(front, back); // Two characters from 's'
      result[i] = (byte)Integer.parseInt(hex, 16);
      front = back;
      back += 2;
    }

    return result;
  }

  /**
   * Creates an SHA-1 hash of supplied string in <code>byte[]</code> form.
   * Uses {@link java.security.MessageDigest#digest()}.
   * @see java.security.MessageDigest#digest()
   * @param plaintext String to hash
   * @return byte[] of length 20
   */
  protected static byte[] createShaHash(String plaintext) {
    shaHash.update(plaintext.getBytes());

    return shaHash.digest();
  }

  /**
   * Reduce then hash, <code>n</code> times. Static version.<br>
   * This method takes a hash, treats it as if it were at some location on a chain, and then
   * runs it along the chain until the final position.<br>
   * So, consider steps ('n') to be counted <b><i>from the right side of the chain</i></b>.<p>
   * For example, with a chain of - K1:H1:K2:H2:K3:H3:...:K10:H10
   * n = 3 would be three in from the right.
   * This places 'plaintext' at the position of hashToKey(hash, 6, 5), or the 7th chain from
   * the left in a chain of length 10.
   * salt = 10 - 3 - 1 = 6</p>
   * @param initialHash Starting hash value
   * @param n Number of times to hash, reduce
   * @param cl Chain length
   * @param kl Key length
   * @return Hash in byte[] form that is 'n' steps from 'initialHash'
   */
  protected static byte[] hashToHashStep(byte[] initialHash, int n, int cl, int kl) {
    // Being asked to make 0 steps, which is just 'initialHash'
    if(n == 0) {
      return initialHash;
    }
    // Prevent stepping off the end of the chain
    if (n > cl - 1) {
      System.out.println("Trying to hash/reduce off chain");
      System.exit(-1);
    }
    int salt = cl - n - 1; // Appropriate salt for present chain location
    byte[] hash = initialHash; // Holds hash that's ultimately returned
    // Reduce (hashToKey()) then hash (createShaHash()), 'n' times
    for (int i = 0; i < n; i++) {
      hash = createShaHash(Table.hashToKey(hash, salt, kl));
      salt++;
    }

    return hash;
  }

  /**
   * Hash reduction algorithm. Produces different result for the same hash depending on supplied
   * <code>salt</code>. Static version.<br>
   * When considered against the *Step() methods, this could be considered a single step.
   * @param hash Hash in byte[] form
   * @param salt int that acts as modifier to method's output
   * @param kl Key length
   * @return Plain-text key
   */
  protected static String hashToKey(byte[] hash, int salt, int kl) {
    String reducedKey = ""; // String we will produce from 'hash'

    // 'salt' will range from 0 to (chainLength-1). When ALLOWABLE_CHARS.length < chainLength
    // 'salt' can grow to be larger than the number of allowable characters. We want to avoid the
    // scenario where salt%ALLOWABLE_CHARS.length wraps around to a value that has already been
    // seen. Should this happen we'll only have ALLOWABLE_CHARS.length unique reduction functions,
    // rather than chainLength-1. Here I attempt to solve this.
    if(salt >= ALLOWABLE_CHARS.length) {
      salt += salt%ALLOWABLE_CHARS.length+1;
    }

    // TODO: Consider this (now quite outdated) different implementation.
    // Slower than the one below, doesn't seem to generate as many matching
    // keys somehow? I like it because it seems cleaner. Will come back to.
    // BigInteger hashAsInt = new BigInteger(hash, 16);
    // BigInteger keySpaceBI = new BigInteger(Long.toString(keySpace));
    // long hashMod = hashAsInt.mod(keySpaceBI).longValue();

    // for(int i = 0; i < kl; i++) {
    // 	long divisor = (long)Math.pow(ALLOWABLE_CHARS.length, i);
    // 	long modDividend = (long)(hashMod/divisor)+salt;
    // 	reducedKey += ALLOWABLE_CHARS[(int)(modDividend%ALLOWABLE_CHARS.length)];
    // }
    // System.out.println(reducedKey);

    /* The length of the hash is divided by the plain-text key length, and stored in 'chunks'.
     * The remainder is stored in 'extra'.
     * The 'byte' elements of the hash are divided evenly among "'chunks' number"
     * of bins, with 1 character from 'extra' added to each bin until none remain.
     * Each byte in a bin is XOR'd with one another (intended to create a unique result), 0xff is
     * added (ensures a positive integer), 'salt' is added, then modular arithmetic used to take
     * the new integer and turn it into a character appropriate for the keyspace.
     */

    int chunks = hash.length / kl; // Integer division
    int extra = hash.length % chunks;

    int leftBound;
    int rightBound = 0;
    // The length of the plain-text key is used to divide the number of bytes in the hash
    // as evenly as possible.
    for (int i = 0; i < kl; i++) {
      leftBound = rightBound;
      if (extra > 0) {
        // Include one extra byte
        rightBound = leftBound + chunks + 1;
        extra--;
      } else {
        rightBound = leftBound + chunks;
      }
      byte subByte = 0;
      // Step through bytes for this group, XORing with 'subByte'
      for(int k = leftBound; k < rightBound; k++) {
        subByte ^= hash[k];
      }
      // TODO: Replace with StringBuilder, although I question the value of this currently
      reducedKey += ALLOWABLE_CHARS[ ((subByte&0xff) + salt) % ALLOWABLE_CHARS.length ];
    }

    return reducedKey;
  }

  /**
   * Performs basic checks that the supplied hash is valid.
   * @param hash Supplied hash as 40-character hex string
   * @return Validity of hash
   */
  protected static boolean isValidHexHash(String hash) {
    // Is the length equal to 'HASHLEN'? Is it proper hexadecimal?
    return hash.matches("^[a-f0-9]{" + HASHLEN + "}");
  }

  /**
   * Hash, reduce, n times, along a chain that starts with <code>initialKey</code>.
   * Static version.<br>
   * 'n' is a location on the chain, <b><i>when counting from left to right</i></b>, which should
   * point to the location of a target key (which isn't held in this method). The intent is that,
   * given the head of the chain, 'initialKey', 'n' steps in will be the particular key that the
   * caller is looking for.
   *
   * @param initialKey Initial plain-text key
   * @param n Number of times to hash, reduce
   * @param cl Chain length
   * @param kl Key length
   * @return Result of 'n' hash, reduce steps
   */
  protected static String keyToKeyStep(String initialKey, int n, int cl, int kl) {
    // Prevent stepping off the end of the chain
    if (n > cl - 1) {
      System.out.println("Trying to reduce/hash off chain");
      System.exit(-1);
    }
    String key = initialKey; // Key that's ultimately returned
    // Hash (createShaHash) then reduce (hashToKey) 'n' times
    for (int i = 0; i < n; i++) {
      key = Table.hashToKey(createShaHash(key), i, kl);
    }

    return key;
  }

  // PUBLIC
  public void close() {
    boolean gotSQLExc = false;
    try {
      DriverManager.getConnection("jdbc:derby:;shutdown=true");
    } catch (SQLException se)  {
      if ( se.getSQLState().equals("XJ015") ) {
        gotSQLExc = true;
      }
    }
    if (!gotSQLExc) {
      System.out.println("Database did not shut down normally");
    }  else  {
      System.out.println("Database shut down normally");
    }
  }
  /** Prints table information summary. */
  public void printSummary() {
    System.out.println("Rainbow table loaded with the following parameters:");
    System.out.println("  Configured -");
    System.out.printf("    * %20s: %,d%n", "Total rows", rowCount);
    System.out.printf("    * %20s: %,d%n", "Table count", tableCount);
    System.out.printf("    * %20s: %,d%n", "Chain length", chainLength);
    System.out.printf("    * %20s: %,d%n", "Key length", keyLength);
    System.out.println();
    System.out.println("  Static -");
    System.out.printf("    * %20s: %,d%n", "Average table size", (rowCount/tableCount));
    System.out.printf("    * %20s: %,d%n", "Key space", keySpace);
    System.out.printf("    * %20s:%n", "Character set");
    // TODO: I know this output looks bad, but it appears the effort to wrap the output is more
    // trouble than it's worth right now.
    System.out.println(Arrays.deepToString(ALLOWABLE_CHARS));
    System.out.println();
  }

  // PROTECTED
  /**
   * Create a rainbow table of length <code>num</code>.
   * @param num Length of table generated
   */
  protected void generateTables(long num) {
    // Create the configured number ('tableCount') of DB tables
    for(int i = 0; i < tableCount; i++) {
      // Of the form: KLX_Y, where 'X' is the key length, 'Y' is the table number
      String createTbl_q = "CREATE TABLE KL" + keyLength + "_" + i + " (" +
          "hashVal CHAR(20) FOR BIT DATA PRIMARY KEY, " +
          "hashKey VARCHAR(10) NOT NULL)";
      // TODO: Fix SQLExeption's
      try {
        conn.createStatement().execute(createTbl_q);
        conn.commit();
      } catch(SQLException se) {
        se.printStackTrace();
      }
    }

    if(DEBUG) {
      System.out.format("Generating table of size %,d%n", num);
      System.out.format("%s\t%s\t%s\t%s\t%s%n",
          "Elapsed", "Rows remaining", "Rows complete/time", "Collisions", "Successful H/s");
    }
    long startTime = currentTimeSeconds();
    long curTime = startTime; // Time since current round was started
    long printTime = 15; // Print every X seconds
    int totalCollisions = 0;
    int prevCollisions = 0; // Key collisions from the previous round
    long prevNum = num; // 'num' from previous round
    while (num > 0) {
      // DEBUG is set and time since last round started is >= printTime
      if(DEBUG && ((currentTimeSeconds())-curTime) >= printTime) {
        // "Elapsed", "Rows remaining", "Rows complete/time", "Collisions", "Successful H/s"
        System.out.format("%d\t%d\t%d\t%d\t%d%n",
            currentTimeSeconds() - startTime,
            num,
            prevNum-num,
            totalCollisions-prevCollisions,
            (prevNum-num)*chainLength/(currentTimeSeconds() - curTime));
        curTime = currentTimeSeconds();
        prevCollisions = totalCollisions;
        prevNum = num;
      }
      String key = generateKey(); // Starting chain key
      // Produce hash from the end of a chain of length 'chainLength' that starts with 'key'
      byte[] hash = hashToHashStep(createShaHash(key), (chainLength - 1));
      // Try to place the new 'key' and 'hash' in one of the available tables.
      if(add(hash, key)) {
        num--;
      } else {
        if(DEBUG) {
          totalCollisions++;
        }
      }
    }
    if(DEBUG) {
      System.out.println("Collisions: " + totalCollisions);
    }
  }

  /**
   * Returns the current system time in seconds.
   * @see System#currentTimeMillis()
   * @return Current time in seconds
   */
  protected long currentTimeSeconds() {
    return System.currentTimeMillis() / 1000L;
  }

  /**
   * Reduce then hash, <code>n</code> times.
   * @param initialHash Starting hash value
   * @param n Number of times to hash, reduce
   * @return Hash in byte[] form that is 'n' steps from 'initialHash'
   */
  protected byte[] hashToHashStep(byte[] initialHash, int n) {
    return hashToHashStep(initialHash, n, chainLength, keyLength);
  }

  /**
   * Randomly generates one key according to parameters in <code>Config</code> object,
   * provided at construction.
   * @see Config
   * @return String adhering to key space constraints
   */
  protected String generateKey() {
    String builtString; // Holds the key as it's built

    // Loop on the key building process until a key in generated that doesn't
    // match an existing key.
    do {
      builtString = "";
      for (int i = 0; i < keyLength; i++) {
        builtString +=
            ALLOWABLE_CHARS[ThreadLocalRandom.current().nextInt(0, ALLOWABLE_CHARS.length)];
      }

    } while (keysHashed.contains(builtString));

    return builtString;
  }

  /**
   * Hash reduction algorithm. Produces different result for the same hash depending on supplied
   * <code>salt</code>.
   * @param hash Hash in byte[] form
   * @param salt int that acts as modifier to method's output
   * @return Plain-text key
   */
  protected String hashToKey(byte[] hash, int salt) {
    return Table.hashToKey(hash, salt, keyLength);
  }

  /**
   * Hash, reduce, n times, along a chain that starts with <code>initialKey</code>.
   * @param initialKey Initial plain-text key
   * @param n Number of times to hash, reduce
   * @return Result of 'n' hash, reduce steps
   */
  protected String keyToKeyStep(String initialKey, int n) {
    return Table.keyToKeyStep(initialKey, n, chainLength, keyLength);
  }

  // PRIVATE

  /**
   * Rudimentary check for all expected tables. Tables could still exist but be incomplete.
   * @return True if expected tables exist, false if not
   */
  private boolean existsRBTables() {
    // How many tables for the target key length exist?
    String tblExists_q = "SELECT COUNT(*) AS rbtables FROM " +
        "SYS.SYSTABLES WHERE TABLENAME LIKE 'KL" + keyLength + "_%'";
    // TODO: Something better needs to happen with these exceptions
    try {
      ResultSet tblExists_rs = conn.createStatement().executeQuery(tblExists_q);
      tblExists_rs.next();
      // Should have equal tables to what we excepted ('tableCount')
      if(tblExists_rs.getInt("rbtables") == tableCount) {
        return true;
      }
    } catch(SQLException se) {
      se.printStackTrace();
    }

    return false;
  }
}